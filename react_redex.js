/*
--------------------------------------------------------------------------------------------------------------------
Две базовые идеи Redux
--------------------------------------------------------------------------------------------------------------------
1) Единое место для глобального хранения state (состояний)

2) Иммутабельность. Первоначальные объекты состоятний являются неизменяемыми. Изменять мы можем только их копии!


--------------------------------------------------------------------------------------------------------------------
Основные термины/понятия Redux
--------------------------------------------------------------------------------------------------------------------

1 ) store (хранилище) - Единое место хранения state (состояний). 
У store есть метод dispatch. Вызвать его и передать объект с action (действием) - это единственный способ, изменить state (стейт), который хранится в хранилище. В результате store запустит reducer (функцию-редьюсер) и сохранит у себя новое значени стейта.
Так же у store есть метод getState, с его помощью можно получить текущее значение стейта.

2) reducer (функция-редьюсер) - функция, которая принимает текущее состояние и объект с action (действием). Эта функция решает, как обновитть состояние и возвращает уже обновлённый стейт, если это необходимо.

3) action (действие) - Это некоторое событие, которое описывает то, что произошлбо в нашем приложении. Технически это обычный объект JavaScript, содержащий поле type (тип), в которое мы вписываем название действия. Вторым важным полем является поле payload (нагрузка). Оно будет содержать полезную нагрузку действия. Под полезной нагрузкой понимается некоторые данные, которые передаются параметрами в действие. Так же в объекте action могут быть и другие поля с дополнительной информацией.

Пример объекта action:

const action_addOrder = {
	type: 'orders/orderAdded',
	payload: 'Paint a wall'
}

Что бы каждый раз не писать объект action вручную, используется функция action creator. Вот пример функции, которая возвращает нам объект с action (действием).

const addOrder = text => {
	return {
		type: 'orders/orderAdded',
		payload: text
	}
}


--------------------------------------------------------------------------------------------------------------------
Три основные концепции Redux
--------------------------------------------------------------------------------------------------------------------

При создании приложения использующее Redux необходимо придерживаться 3х концепций:

1) Есть только один источник истины! Глобольлное состояние нашего приложения хранится в дереве объектов внутри единственного хранилища.

2) State (состояние) можно только читать! Единственным способом его изменения должно быть содание экшена - объекта, который описывает что произошло.

3) В изменениях могут учавствовать только чистые функции! То есть для того, что бы указать, как должно измениться наше дерево состоянвия, мы должны написаить чистый reducer (функцию - редьюсер)



--------------------------------------------------------------------------------------------------------------------
Основные инструменты Redux
--------------------------------------------------------------------------------------------------------------------

Несмотря на то, что Redux - это маленькая самостоятельная JS-библиотека, её можно использовать с различными фреймворками. Считается, что наиболее часто ее применяют именно с React библиотекой. Создатели Redux выпустили официальный пакет React-Redux, позволяющий работать React компонентам в связке с Redux.

Вторым важным инструментом для работы, является Redux Toolkit или просто RTK. Он позволяет уменьшить количество устанавливаемых зависимостей, упростить код и скоратить количество шаблонного кода в приложении, а также имеет много полезных встроенных вещей, таких как Redux Thunk и Redux DevTools, которые будут рассмотрены позже.

И наконец отладочный инструмент - расширение для браузера Redux DevTools Extension. Оно помогает нам отслеживать сизменение состояния в Redux store и эффективно отлаживать приложение.
________________________________________________________________________________________________________________________________________________



 */